import 'dart:io';
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'select_location_page.dart'; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

class RegisterPage extends StatefulWidget {
  const RegisterPage({super.key});

  @override
  State<RegisterPage> createState() => _RegisterPageState();
}

class _RegisterPageState extends State<RegisterPage> {
  final fullnameCtl = TextEditingController();
  final phoneCtl = TextEditingController();
  final passCtl = TextEditingController();
  final vehicleCtl = TextEditingController();

  String selectedRole = "customer"; // default
  String imageBase64 = '';
  String riderImageBase64 = '';
  String vehicleImageBase64 = '';

  double? latitude;
  double? longitude;
  double? latitude2;
  double? longitude2;

  /// ‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  Future<void> registerUser() async {
    try {
      if (fullnameCtl.text.isEmpty ||
          phoneCtl.text.isEmpty ||
          passCtl.text.isEmpty) {
        _showSnackBar("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‚ùó");
        return;
      }

      var db = FirebaseFirestore.instance;

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞ customer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (selectedRole == "customer") {
        var existing = await db
            .collection("Users")
            .where("phone", isEqualTo: phoneCtl.text)
            .get();

        if (existing.docs.isNotEmpty) {
          _showSnackBar("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚ùå");
          return;
        }
      }

      Map<String, dynamic> data = {
        "fullname": fullnameCtl.text,
        "phone": phoneCtl.text,
        "password": passCtl.text, // (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
        "role": selectedRole,
        "createdAt": FieldValue.serverTimestamp(),
      };

      // üìç ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      if (selectedRole == "customer") {
        if (latitude == null || longitude == null) {
          _showSnackBar("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà üåç");
          return;
        }

        data.addAll({
          "location": {"lat": latitude, "lng": longitude},
          "location2": (latitude2 != null && longitude2 != null)
              ? {"lat": latitude2, "lng": longitude2}
              : null,
          "image": imageBase64,
        });
      }

      // üõµ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
      if (selectedRole == "rider") {
        if (vehicleCtl.text.isEmpty ||
            riderImageBase64.isEmpty ||
            vehicleImageBase64.isEmpty) {
          _showSnackBar("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‚ùó");
          return;
        }

        data.addAll({
          "vehicleNumber": vehicleCtl.text,
          "riderImage": riderImageBase64,
          "vehicleImage": vehicleImageBase64,
        });
      }

      await db.collection("Users").add(data);
      _showSnackBar("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ");

      if (mounted) Navigator.pop(context);
    } catch (e) {
      _showSnackBar("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‚ùå: $e");
    }
  }

  /// üì∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ
  Future<void> pickImage(String type) async {
    try {
      final picker = ImagePicker();
      final pickedFile = await picker.pickImage(source: ImageSource.gallery);

      if (pickedFile != null) {
        final bytes = await File(pickedFile.path).readAsBytes();
        final base64Img = base64Encode(bytes);

        if (!mounted) return;

        setState(() {
          if (type == "customer") imageBase64 = base64Img;
          if (type == "riderImage") riderImageBase64 = base64Img;
          if (type == "vehicleImage") vehicleImageBase64 = base64Img;
        });
      }
    } catch (e) {
      _showSnackBar("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå");
    }
  }

  /// SnackBar helper
  void _showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      body: SingleChildScrollView(
        child: Column(
          children: [
            // üî∏ Header
            Container(
              width: double.infinity,
              padding: const EdgeInsets.symmetric(vertical: 30),
              decoration: const BoxDecoration(color: Color(0xFFFF8C42)),
              child: const Center(
                child: Text(
                  "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
            const SizedBox(height: 40),

            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  // üî∏ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
                  DropdownButtonFormField<String>(
                    value: selectedRole,
                    decoration: _inputDecoration("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó"),
                    items: const [
                      DropdownMenuItem(
                        value: "customer",
                        child: Text("Customer"),
                      ),
                      DropdownMenuItem(
                        value: "rider",
                        child: Text("Rider"),
                      ),
                    ],
                    onChanged: (value) {
                      setState(() => selectedRole = value!);
                    },
                  ),
                  const SizedBox(height: 12),

                  // üî∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                  TextField(
                    controller: fullnameCtl,
                    decoration: _inputDecoration("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"),
                  ),
                  const SizedBox(height: 12),

                  TextField(
                    controller: phoneCtl,
                    keyboardType: TextInputType.phone,
                    decoration: _inputDecoration("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"),
                  ),
                  const SizedBox(height: 12),

                  // üî∏ Customer
                  if (selectedRole == "customer") ...[
                    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å
                    GestureDetector(
                      onTap: () async {
                        final result = await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const SelectLocationPage(),
                          ),
                        );

                        if (result != null && mounted) {
                          setState(() {
                            latitude = result['lat'];
                            longitude = result['lng'];
                          });
                        }
                      },
                      child: Container(
                        padding: const EdgeInsets.all(14),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(30),
                          color: Colors.white,
                          border:
                              Border.all(color: const Color(0xFFFF8C42), width: 3),
                        ),
                        child: Row(
                          children: [
                            const Icon(Icons.map, color: Color(0xFFFF8C42)),
                            const SizedBox(width: 10),
                            Expanded(
                              child: Text(
                                latitude == null
                                    ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
                                    : "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å: (${latitude!.toStringAsFixed(5)}, ${longitude!.toStringAsFixed(5)})",
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),

                    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á
                    GestureDetector(
                      onTap: () async {
                        final result = await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const SelectLocationPage(),
                          ),
                        );

                        if (result != null && mounted) {
                          setState(() {
                            latitude2 = result['lat'];
                            longitude2 = result['lng'];
                          });
                        }
                      },
                      child: Container(
                        padding: const EdgeInsets.all(14),
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(30),
                          color: Colors.white,
                          border:
                              Border.all(color: const Color(0xFFFF8C42), width: 3),
                        ),
                        child: Row(
                          children: [
                            const Icon(Icons.map_outlined, color: Color(0xFFFF8C42)),
                            const SizedBox(width: 10),
                            Expanded(
                              child: Text(
                                latitude2 == null
                                    ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"
                                    : "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á: (${latitude2!.toStringAsFixed(5)}, ${longitude2!.toStringAsFixed(5)})",
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 12),

                    GestureDetector(
                      onTap: () => pickImage("customer"),
                      child: UploadButton(
                        icon: Icons.image,
                        label: imageBase64.isEmpty
                            ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
                            : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
                      ),
                    ),
                    const SizedBox(height: 12),
                  ],

                  // üî∏ Rider
                  if (selectedRole == "rider") ...[
                    TextField(
                      controller: vehicleCtl,
                      decoration: _inputDecoration("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞"),
                    ),
                    const SizedBox(height: 12),

                    GestureDetector(
                      onTap: () => pickImage("riderImage"),
                      child: UploadButton(
                        icon: Icons.person,
                        label: riderImageBase64.isEmpty
                            ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå"
                            : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
                      ),
                    ),
                    const SizedBox(height: 12),

                    GestureDetector(
                      onTap: () => pickImage("vehicleImage"),
                      child: UploadButton(
                        icon: Icons.directions_bike,
                        label: vehicleImageBase64.isEmpty
                            ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏£‡∏ñ/‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ"
                            : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ",
                      ),
                    ),
                    const SizedBox(height: 12),
                  ],

                  // üî∏ Password
                  TextField(
                    controller: passCtl,
                    obscureText: true,
                    decoration: _inputDecoration("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"),
                  ),
                  const SizedBox(height: 25),

                  // üî∏ ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: registerUser,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFFFF8C42),
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                      child: const Text(
                        "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
                        style: TextStyle(fontSize: 18, color: Colors.white),
                      ),
                    ),
                  ),
                  const SizedBox(height: 15),

                  // üî∏ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text("‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? "),
                      GestureDetector(
                        onTap: () => Navigator.pop(context),
                        child: const Text(
                          "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
                          style: TextStyle(
                            color: Color(0xFFFF8C42),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// ‚úÖ input style ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  InputDecoration _inputDecoration(String hint) => InputDecoration(
        hintText: hint,
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: const BorderSide(color: Color(0xFFFF8C42), width: 3),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
          borderSide: const BorderSide(color: Color(0xFFFF8C42), width: 2.5),
        ),
        filled: true,
        fillColor: Colors.white,
      );
}

/// ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
class UploadButton extends StatelessWidget {
  final IconData icon;
  final String label;

  const UploadButton({super.key, required this.icon, required this.label});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(14),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(30),
        color: Colors.white,
        border: Border.all(color: const Color(0xFFFF8C42), width: 3),
      ),
      child: Row(
        children: [
          Icon(icon, color: const Color(0xFFFF8C42)),
          const SizedBox(width: 10),
          Expanded(child: Text(label)),
        ],
      ),
    );
  }
}
