import 'dart:convert';
import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:image_picker/image_picker.dart';
import 'package:latlong2/latlong.dart';
import 'package:delivery_app/pages/rider/homepage_rider.dart';

class RiderCurrentJobPage extends StatefulWidget {
  final String productId;
  final String riderId;

  const RiderCurrentJobPage({
    super.key,
    required this.productId,
    required this.riderId,
  });

  @override
  State<RiderCurrentJobPage> createState() => _RiderCurrentJobPageState();
}

class _RiderCurrentJobPageState extends State<RiderCurrentJobPage> {
  final FirebaseFirestore db = FirebaseFirestore.instance;
  final ImagePicker _picker = ImagePicker();

  Future<Map<String, String>> getSenderInfo(String senderId) async {
    try {
      if (senderId.isEmpty) return {'name': '-', 'phone': '-'};
      final doc = await db.collection('Users').doc(senderId).get();
      if (doc.exists) {
        final data = doc.data()!;
        return {'name': data['fullname'] ?? '-', 'phone': data['phone'] ?? '-'};
      }
    } catch (e) {}
    return {'name': '-', 'phone': '-'};
  }

  /// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô "‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
  Future<void> completeDelivery() async {
    if (!mounted) return;

    try {
      // 1Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      await db.collection("Products").doc(widget.productId).update({
        "status": "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ",
      });

      // 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
      final riderDoc = await db.collection("Users").doc(widget.riderId).get();
      final phone = riderDoc['phone'] ?? '';
      final role = riderDoc['role'] ?? '';
      final userId = widget.riderId;

      // 3Ô∏è‚É£ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
      await db.collection("Users").doc(widget.riderId).update({
        "currentJobId": "",
      });

      // 4Ô∏è‚É£ ‡πÅ‡∏™‡∏î‡∏á SnackBar
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")),
      );

      await Future.delayed(const Duration(seconds: 2));

      // 5Ô∏è‚É£ ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ HomePageRider ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          builder: (context) => HomepageRider(
            phone: phone,
            role: role,
            userId: userId,
          ),
        ),
      );

      // 6Ô∏è‚É£ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      db.collection("Products").doc(widget.productId).delete().catchError((e) {
        debugPrint("Error deleting product: $e");
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e")),
        );
      }
    }
  }

  /// üì∏ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  Future<void> takePhotoAndUpdateStatus({
    required String fieldName,
    required String newStatus,
  }) async {
    try {
      final XFile? photo = await _picker.pickImage(
        source: ImageSource.camera,
        imageQuality: 70,
      );

      if (photo == null) return;

      final bytes = await File(photo.path).readAsBytes();
      final base64Image = base64Encode(bytes);

      await db.collection("Products").doc(widget.productId).update({
        fieldName: base64Image,
        "status": newStatus,
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e")),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<DocumentSnapshot>(
      stream: db.collection("Products").doc(widget.productId).snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData || snapshot.data == null || !snapshot.data!.exists) {
          return const Scaffold(
            body: Center(child: Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ (‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)")),
          );
        }

        final data = snapshot.data!.data() as Map<String, dynamic>?;

        if (data == null) {
          return const Scaffold(body: Center(child: Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ")));
        }

        Map<String, double>? receiverLocation;
        if (data['receiverLocation'] != null) {
          receiverLocation = {
            'lat': data['receiverLocation']['lat'],
            'lng': data['receiverLocation']['lng'],
          };
        }

        final hasPickupPhoto =
            data['pickupImage'] != null && data['pickupImage'].toString().isNotEmpty;
        final hasDeliveredPhoto =
            data['deliveredImage'] != null && data['deliveredImage'].toString().isNotEmpty;

        return FutureBuilder<Map<String, String>>(
          future: getSenderInfo(data['senderId'] ?? ''),
          builder: (context, senderSnapshot) {
            final senderName = senderSnapshot.data?['name'] ?? '-';
            final senderPhone = senderSnapshot.data?['phone'] ?? '-';

            return Scaffold(
              appBar: AppBar(
                backgroundColor: const Color(0xFFFFA64C),
                title: const Text("‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"),
              ),
              body: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // ‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: data['productImage'] != null &&
                              data['productImage'].toString().isNotEmpty
                          ? Image.memory(
                              base64Decode(data['productImage']),
                              width: double.infinity,
                              height: 200,
                              fit: BoxFit.cover,
                            )
                          : Image.asset(
                              'assets/no_image.png',
                              width: double.infinity,
                              height: 200,
                              fit: BoxFit.cover,
                            ),
                    ),
                    const SizedBox(height: 20),

                    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    Card(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                        side: const BorderSide(
                          color: Color(0xFFFF8C42),
                          width: 1.5,
                        ),
                      ),
                      color: Colors.orange.shade50,
                      child: Padding(
                        padding: const EdgeInsets.all(12),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                color: Colors.orange.shade800,
                              ),
                            ),
                            const Divider(color: Colors.orange),
                            Text('üì¶ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${data['productName'] ?? '-'}'),
                            const SizedBox(height: 5),
                            Text('üöö ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: $senderName'),
                            const SizedBox(height: 5),
                            Text('üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: $senderPhone'),
                            const SizedBox(height: 5),
                            Text('üë§ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: ${data['receiverName'] ?? '-'}'),
                            const SizedBox(height: 5),
                            Text('üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: ${data['receiverPhone'] ?? '-'}'),
                            const SizedBox(height: 5),
                            Text('üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${data['status'] ?? '-'}'),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),

                    // ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
                    if (receiverLocation != null)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.orange.shade800,
                            ),
                          ),
                          const SizedBox(height: 10),
                          Container(
                            height: 250,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              border: Border.all(
                                color: Colors.orange,
                                width: 2,
                              ),
                            ),
                            child: ClipRRect(
                              borderRadius: BorderRadius.circular(10),
                              child: FlutterMap(
                                options: MapOptions(
                                  initialCenter: LatLng(
                                    receiverLocation['lat']!,
                                    receiverLocation['lng']!,
                                  ),
                                  initialZoom: 15,
                                ),
                                children: [
                                  TileLayer(
                                    urlTemplate:
                                        'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=eeb2695f683043e1a2cb2968a6a51064',
                                    userAgentPackageName:
                                        'com.example.delivery_app',
                                  ),
                                  MarkerLayer(
                                    markers: [
                                      Marker(
                                        point: LatLng(
                                          receiverLocation['lat']!,
                                          receiverLocation['lng']!,
                                        ),
                                        width: 50,
                                        height: 50,
                                        child: const Icon(
                                          Icons.location_pin,
                                          color: Colors.red,
                                          size: 40,
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ],
                      ),

                    const SizedBox(height: 30),

                    // ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    ElevatedButton.icon(
                      onPressed: () => takePhotoAndUpdateStatus(
                        fieldName: "pickupImage",
                        newStatus: "‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏™‡πà‡∏á üöö",
                      ),
                      icon: const Icon(Icons.camera_alt),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blueAccent,
                        minimumSize: const Size(double.infinity, 50),
                      ),
                      label: const Text(
                        "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                        style: TextStyle(fontSize: 18, color: Colors.white),
                      ),
                    ),
                    if (hasPickupPhoto)
                      Padding(
                        padding: const EdgeInsets.only(top: 10),
                        child: Image.memory(
                          base64Decode(data['pickupImage']),
                          width: double.infinity,
                          height: 200,
                          fit: BoxFit.cover,
                        ),
                      ),
                    const SizedBox(height: 20),

                    // ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    ElevatedButton.icon(
                      onPressed: hasPickupPhoto
                          ? () => takePhotoAndUpdateStatus(
                              fieldName: "deliveredImage",
                              newStatus: "‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß üì¶",
                            )
                          : null,
                      icon: const Icon(Icons.local_shipping),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: hasPickupPhoto
                            ? Colors.orange
                            : Colors.orange,
                        minimumSize: const Size(double.infinity, 50),
                      ),
                      label: const Text(
                        "üì∏ ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                        style: TextStyle(fontSize: 18, color: Colors.white),
                      ),
                    ),
                    if (hasDeliveredPhoto)
                      Padding(
                        padding: const EdgeInsets.only(top: 10),
                        child: Image.memory(
                          base64Decode(data['deliveredImage']),
                          width: double.infinity,
                          height: 200,
                          fit: BoxFit.cover,
                        ),
                      ),

                    const SizedBox(height: 30),

                    // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    if (hasDeliveredPhoto)
                      ElevatedButton.icon(
                        onPressed: completeDelivery,
                        icon: const Icon(Icons.check_circle_outline),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                          minimumSize: const Size(double.infinity, 50),
                        ),
                        label: const Text(
                          "‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                          style: TextStyle(fontSize: 18, color: Colors.white),
                        ),
                      ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }
}
